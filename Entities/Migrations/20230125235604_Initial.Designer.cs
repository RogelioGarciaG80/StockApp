// <auto-generated />
using System;
using Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(OrdersDbContext))]
    [Migration("20230125235604_Initial")]
    partial class Initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.2")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Entities.BuyOrder", b =>
                {
                    b.Property<Guid>("BuyOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTimeOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("BuyOrderID");

                    b.ToTable("BuyOrder", (string)null);

                    b.HasData(
                        new
                        {
                            BuyOrderID = new Guid("b1cb2909-0265-4ab7-ad5c-6bdccdbdb191"),
                            DateAndTimeOfOrder = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 240.61000000000001,
                            Quantity = 1L,
                            StockName = "Microsoft",
                            StockSymbol = "MSFT"
                        },
                        new
                        {
                            BuyOrderID = new Guid("3c153be8-933f-4119-8890-fb47c24a0e86"),
                            DateAndTimeOfOrder = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 141.86000000000001,
                            Quantity = 1L,
                            StockName = "Apple",
                            StockSymbol = "AAPL"
                        },
                        new
                        {
                            BuyOrderID = new Guid("417e0310-ce0d-4c7f-a2e1-f8a02ddf8da8"),
                            DateAndTimeOfOrder = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 144.43000000000001,
                            Quantity = 1L,
                            StockName = "Tesla",
                            StockSymbol = "TSLA"
                        },
                        new
                        {
                            BuyOrderID = new Guid("3a09d4e8-97da-48e2-a2c7-2df312b0c851"),
                            DateAndTimeOfOrder = new DateTime(2023, 1, 16, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 141.5,
                            Quantity = 1L,
                            StockName = "META",
                            StockSymbol = "META"
                        });
                });

            modelBuilder.Entity("Entities.SellOrder", b =>
                {
                    b.Property<Guid>("SellOrderID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("DateAndTimeOfOrder")
                        .HasColumnType("datetime2");

                    b.Property<double>("Price")
                        .HasColumnType("float");

                    b.Property<long>("Quantity")
                        .HasColumnType("bigint");

                    b.Property<string>("StockName")
                        .IsRequired()
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<string>("StockSymbol")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("SellOrderID");

                    b.ToTable("SellOrder", (string)null);

                    b.HasData(
                        new
                        {
                            SellOrderID = new Guid("2b8a325a-afaa-4b34-ac9b-5992b48ca897"),
                            DateAndTimeOfOrder = new DateTime(2023, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 367.95999999999998,
                            Quantity = 2L,
                            StockName = "Netflix, Inc. ",
                            StockSymbol = "NFLX"
                        },
                        new
                        {
                            SellOrderID = new Guid("a684ccee-322f-4b23-80e1-8ecd8c113300"),
                            DateAndTimeOfOrder = new DateTime(2023, 1, 17, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            Price = 490.88,
                            Quantity = 1L,
                            StockName = "Costco Wholesale Corporation",
                            StockSymbol = "COST"
                        });
                });
#pragma warning restore 612, 618
        }
    }
}
